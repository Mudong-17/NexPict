/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as LayoutUploadIndexImport } from './routes/_layout/upload/index'
import { Route as LayoutPluginIndexImport } from './routes/_layout/plugin/index'
import { Route as LayoutLogsIndexImport } from './routes/_layout/logs/index'
import { Route as LayoutAlbumIndexImport } from './routes/_layout/album/index'
import { Route as LayoutAboutIndexImport } from './routes/_layout/about/index'
import { Route as LayoutPluginIdImport } from './routes/_layout/plugin/$id'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutUploadIndexRoute = LayoutUploadIndexImport.update({
  id: '/upload/',
  path: '/upload/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPluginIndexRoute = LayoutPluginIndexImport.update({
  id: '/plugin/',
  path: '/plugin/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutLogsIndexRoute = LayoutLogsIndexImport.update({
  id: '/logs/',
  path: '/logs/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAlbumIndexRoute = LayoutAlbumIndexImport.update({
  id: '/album/',
  path: '/album/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAboutIndexRoute = LayoutAboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPluginIdRoute = LayoutPluginIdImport.update({
  id: '/plugin/$id',
  path: '/plugin/$id',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/plugin/$id': {
      id: '/_layout/plugin/$id'
      path: '/plugin/$id'
      fullPath: '/plugin/$id'
      preLoaderRoute: typeof LayoutPluginIdImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/about/': {
      id: '/_layout/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof LayoutAboutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/album/': {
      id: '/_layout/album/'
      path: '/album'
      fullPath: '/album'
      preLoaderRoute: typeof LayoutAlbumIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/logs/': {
      id: '/_layout/logs/'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LayoutLogsIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/plugin/': {
      id: '/_layout/plugin/'
      path: '/plugin'
      fullPath: '/plugin'
      preLoaderRoute: typeof LayoutPluginIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/upload/': {
      id: '/_layout/upload/'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof LayoutUploadIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutPluginIdRoute: typeof LayoutPluginIdRoute
  LayoutAboutIndexRoute: typeof LayoutAboutIndexRoute
  LayoutAlbumIndexRoute: typeof LayoutAlbumIndexRoute
  LayoutLogsIndexRoute: typeof LayoutLogsIndexRoute
  LayoutPluginIndexRoute: typeof LayoutPluginIndexRoute
  LayoutUploadIndexRoute: typeof LayoutUploadIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutPluginIdRoute: LayoutPluginIdRoute,
  LayoutAboutIndexRoute: LayoutAboutIndexRoute,
  LayoutAlbumIndexRoute: LayoutAlbumIndexRoute,
  LayoutLogsIndexRoute: LayoutLogsIndexRoute,
  LayoutPluginIndexRoute: LayoutPluginIndexRoute,
  LayoutUploadIndexRoute: LayoutUploadIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/plugin/$id': typeof LayoutPluginIdRoute
  '/about': typeof LayoutAboutIndexRoute
  '/album': typeof LayoutAlbumIndexRoute
  '/logs': typeof LayoutLogsIndexRoute
  '/plugin': typeof LayoutPluginIndexRoute
  '/upload': typeof LayoutUploadIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/plugin/$id': typeof LayoutPluginIdRoute
  '/about': typeof LayoutAboutIndexRoute
  '/album': typeof LayoutAlbumIndexRoute
  '/logs': typeof LayoutLogsIndexRoute
  '/plugin': typeof LayoutPluginIndexRoute
  '/upload': typeof LayoutUploadIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/plugin/$id': typeof LayoutPluginIdRoute
  '/_layout/about/': typeof LayoutAboutIndexRoute
  '/_layout/album/': typeof LayoutAlbumIndexRoute
  '/_layout/logs/': typeof LayoutLogsIndexRoute
  '/_layout/plugin/': typeof LayoutPluginIndexRoute
  '/_layout/upload/': typeof LayoutUploadIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/plugin/$id'
    | '/about'
    | '/album'
    | '/logs'
    | '/plugin'
    | '/upload'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/plugin/$id'
    | '/about'
    | '/album'
    | '/logs'
    | '/plugin'
    | '/upload'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/_layout/plugin/$id'
    | '/_layout/about/'
    | '/_layout/album/'
    | '/_layout/logs/'
    | '/_layout/plugin/'
    | '/_layout/upload/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/plugin/$id",
        "/_layout/about/",
        "/_layout/album/",
        "/_layout/logs/",
        "/_layout/plugin/",
        "/_layout/upload/"
      ]
    },
    "/_layout/plugin/$id": {
      "filePath": "_layout/plugin/$id.tsx",
      "parent": "/_layout"
    },
    "/_layout/about/": {
      "filePath": "_layout/about/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/album/": {
      "filePath": "_layout/album/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/logs/": {
      "filePath": "_layout/logs/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/plugin/": {
      "filePath": "_layout/plugin/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/upload/": {
      "filePath": "_layout/upload/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
